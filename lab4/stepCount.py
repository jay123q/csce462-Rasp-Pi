import board 
import busio 
import adafruit_mpu6050 
 
# perf_counter is more precise than time() for dt calculation 
import time as t
from math import sqrt
import matplotlib.pyplot as plt
def TestCases():
    step = 0
    JoshWalk = {"varying_fast_slow":[-3.9085878505529106, -1.0858580442664074, -2.6292625164553565, 1.2151896212362345, -1.3874652949802275, -3.8981229103768245, -1.5276240561497048, -1.8973612073666875, -1.6197282266220867, -1.663830725497247, -3.699207900512139, -2.189543240179267, -2.1720414664554966, -3.021868542407937, -2.7230036656490384, -2.1605321286483132, -1.1313958785636604, -0.7557308468214945, -1.8667552556155638, -0.14499397163295136, -1.2176690860062838, -0.41960584747268115, -1.947216661611293, -1.7593402414269477, -1.5278257046988752, -1.0509387686042402, -2.08775158662254, -0.7930504052974552, -1.9301547717433891, -2.3503822497274793, -1.2714774066893106, -2.0972925393745037, -2.1475057999036924, -2.447129759030309, -1.238792015832951, -1.820483093363153, 0.03227294053813701, -1.662284533619113, -1.3813446321458187, -1.9877973966319278, 0.14762622351007693, -1.6838898003191076, -1.2370469279318463, -1.5994871762136587, 1.397373347160018, -1.5294374327237232, -1.4986862224209716, -1.296132431710511, -0.9342002887907004, -1.5289579494231873, -1.9765097312648106, -1.3715439617009793, -2.693903802234999, -0.8793088831972202, -2.310898822268472, -1.2455251703853847, -1.5722851100280035, 0.5074376036885972, -2.536640780894847, -1.2721085792334161, -0.506411897745199, -2.2470536907087624, -2.0455230553429686, -0.16782153225189766, 0.2740676252088843, -2.062814442082999, 2.6619452840723845, -0.44310443540150857, 0.26722343634905776, -1.3878334682181226, 4.794538975659899, -1.6935761335135844, -1.147108622149469, -1.8202829282647635, -1.6272774527546012, -2.189832300866385, -1.7217758865794295, -0.648715279573965, -2.0005185782191024, -0.970946813008366, -0.8859854942816554, -2.607861333694002, -1.4803626216335957, 5.368030308275399, -1.589266297849841, -1.4365778871261305, -2.075323719890136, -3.017429039987266, -0.5602650050668299, -1.5242204695337005, -0.9120688777460266, -2.501513567431987, -0.579662597767518, -1.8165566791450516, -1.8514408204060917, -2.2594636980943825, 1.8987408778235562, 1.5703902184081695, -1.393314637109933, -0.213884914862577]
                ,"slow_wide_steps":[11.764885087483236, -0.6731250537448936, 0.7970355761280778, -0.217965482980377, -1.4361751867975379, -2.1994812762322216, -3.0711059735308037, -2.344990232740839, -2.8046295721475083, -1.8463827501890222, 0.5279103292488525, -1.1415806677261173, -1.675489712063115, -1.7171810934526412, -1.4026372924044708, -0.24298934049100218, -1.1612859229010102, -1.2550819965991007, -1.5180601560134477, -1.7885176147649915, -1.6564695399935268, -1.276525171734244, -1.7035948991763927, -1.3024773134367038, -2.0298791685874633, -1.8810774930968126, -0.5926437053014624, 1.287665101791882, -1.3102421733224237, -1.9341874385383324, -1.4657404771186062, -1.5786062218895953, -1.8383540821248658, -1.747176887045926, -0.2935455480030047, -1.3728098904725918, -0.8100875799582123, -0.7243791072086712, -1.5410144333361053, -0.9975247779201109, -1.7882471462473042, -1.229970502088742, -1.9064135222127927, -1.6801755739014155, -2.4101492879980766, -1.6428186861575078, -1.9472590072052167, -2.136482961404491, -1.6545712326101594, -2.112974384722426, -1.3767718267296374, -2.3474272349658536, -1.7038013202483953, -1.7063245694744804, -1.015734989356103, -1.5260051806650186, 0.8095940567786002, -1.445938800918091, -1.3003416719517809, -2.698778340814018, -1.0428331044992643, -1.8286104042471685, -1.0309615459573713, -1.3641325477712165, -1.0631145604391357, -1.3983673958337892, -1.47354584483438, -1.819706008115519, -1.580061082710495, -1.7246490430271102, -1.1895664118251368, -1.6214253203424924, -1.0663486027940046, -1.4087789654667926, -1.9181204252970652, -1.3814559668532418, -1.678618522468124, -2.117229159642985, -1.3712521938147137, -0.05650029151774838, -1.7196490772991044, -1.3475047772474351, -2.3630913344076943, -1.1340997201616396, -1.5923108626121234, -0.6806210709091971, -1.0539361575218038, -0.8849178169446326, -1.1408643588756568, -1.1863661740464089, -1.0139895367019456, -1.1506064520160368, -0.9099860927326162, -1.5230160181228811, -1.1953700303644599, -1.3969235049649242, -2.0325656279030646, -1.5671792273254024, -3.9565200156709093, -1.5505553758597994]
                ,"fast_wide_steps":[-1.9721456597837932, -1.9860931192044387, -1.215654439183112, 4.386960167810216, -2.9551871478243017, -2.6154590595285008, -1.18894970199986, 1.5022180547624995, -0.25590994982027304, -2.3594905270443602, -2.9811116559855417, -0.5237910039000795, -1.3163444643483597, -2.377788014060081, -0.949953297960592, 0.5876580633497941, 1.2245908186410155, -2.2982875471794184, -3.1136187639758095, -3.6654308021016258, -0.7616917141128106, -0.9337346937579056, -1.1586764652355175, -2.228813666088776, -2.136634242017575, -2.524497316961206, -1.720931218444706, -0.9439593213681121, -0.5352177252963379, -3.5530919799905964, -1.0777416253841139, 0.6363278985599212, -1.0391958415547524, -0.28105327577009476, -0.6012972854881209, -0.7619278081421275, -3.718381785265234, -0.29490701934197183, -0.8071082358491335, -1.0149558113782966, -0.5890035967661067, -1.486735941019063, -1.8426568610746923, -3.367961439020359, 0.2492467465902699, 1.5229309889290974, -2.7510533338516048, -0.3759372993402863, -2.3250746004854523, -0.9749336876898216, 0.23157458909869177, -2.0859325694530106, 0.07932658718884511, -2.53830625438382, 0.6112652590335514, 0.6935434699783087, -3.779239126408352, -1.564324313685976, 1.7584854289862282, 0.6808740732040413, -2.1040914040171295, -1.3202215416398229, -0.1801480590600022, -0.2642763118193585, 4.439589912486813, -0.7851374166079985, -3.5440021805400725, -2.850562548336156, -0.9260486978886195, 1.0323926120569702, -2.466471359776139, 0.35661755059600964, -1.5941314249331064, -3.34728779164751, -0.36726458631215664, -0.03790076443034707, -3.8409877731892115, -0.6279912750314018, 0.38953293400411404, -3.320814824646683, -1.9635009811011663, -0.4289174523015564, -3.2541503584651936, -2.569676144900302, 1.945838062370532, -3.8755898990508513, -1.8217918516692766, -6.550706328223056, -0.9084628991016093, -1.8116964046530466, -5.036428271981177, -0.8752232950379799, -1.4995252177332041, -4.70894763421702, 2.352852367523033, -0.9164697118139262, -1.84265348813779, 1.4129962180196838, 0.7940911186211608, -2.7399825240153115]
                ,"slow_short_steps":[-1.9884188736126251, -1.5389368417049223, -2.010721073978157, -2.4570380417230853, -1.8637487194887221, -1.5565544413712757, -1.496205686902643, -1.8836278801940871, -1.4496896014190046, -2.152831817861495, -0.8586189281189203, -3.8345862016378716, -2.368225223220537, -0.7766792172204049, 0.04964962145785279, -1.062186209859954, -3.452824756008245, -1.608374446077315, -0.8299094336060939, -0.9649198483637562, -1.3855811253248138, 0.3213135914124017, -1.4406545231861685, -1.7708448774873649, -1.482542962585958, -0.10699752743739488, -1.8093331568870497, -1.9711130461173312, -2.0929225911458325, -1.6777734304515075, -1.9817531910265238, -0.9790725920838685, -1.3863643872530886, -1.0673453700261977, -2.112731221654247, -0.8871357620294624, -1.9984069409377092, -1.9137236686695633, -0.11681834581986017, -2.0852645164199988, -1.2432838025801942, -1.1386924052455392, -1.8042718334087766, -3.0278772584821834, 2.2030243882598715, -1.7973485699037628, -2.026055532053242, -1.752794635484987, -1.3093788698247106, -2.918283789191693, -1.0475342810768797, -1.937474657740946, -0.9176276553667702, -2.138798593950199, 1.8224657263160005, -2.228055408963936, -0.007625023753931259, -1.5192753031866602, -1.4562431981386812, -1.8909359519664921, 0.043502443869799734, -1.1075138426501354, -0.9457369157637903, -2.293534162425402, -1.5756658309144047, -1.0421151555691583, -2.211735786729669, -0.10427071233567098, -1.0834435499662174, 0.04917457768047129, -1.8310295307439102, -1.4462878032458857, -1.8509509148565773, -0.44116578044611643, 0.3448222891345072, -2.769450304125126, -1.0520307763648091, -1.1108097145099265, -1.5305311686716294, 0.19388547226075126, -2.3580857045096755, -1.5423063766203136, -2.4284356935489244, 0.653087663327554, -1.1467981008931503, -1.2916818784656954, -0.7072197881674995, -0.7807469738072808, -0.11083623920842811, -2.1413728687123097, -2.9687227681035475, -1.663335887692396, -1.5589991482013978, 0.32231225501015714, -0.9417587672494072, -1.7733935616386471, -1.1252916525633516, -1.7724357508726616, -1.8251467575393718, -0.9141347911099214]
                ,"fast_short_steps":[-1.4690140374058096, -1.6306492444391019, -0.5929977344269872, -1.96664601960447, -1.5506382016881712, -0.209286550628482, -3.1620073337953407, 1.2280579946348933, -1.1341040788250414, -1.5079877017507943, 1.4194321500039297, -3.0361606563910293, -3.405488438348649, -2.152123302184, -1.303290163036527, -1.6038622615156068, -3.7523681631696233, 0.9700340429087007, -0.09731288258499049, -0.2817975417898939, -3.9381465134174443, 0.3110225798848809, -0.9364719186500619, -0.3957102806222128, -1.7234055984191041, -0.11550217268212037, -4.590764514343104, -4.034640035171384, 1.4874390770928265, 10.057180963967596, 2.4957065356053256, -2.435333008490426, -3.768456359703883, -2.34286827593923, -0.13096072824484928, -0.5353209136054833, -2.4519586237866244, -1.932309945497508, 5.295188530939237, 0.7252119063106619, -3.1868185735793118, -3.720785781810596, -1.6441353126614846, 2.9064338649130494, -2.213776592405747, -1.9274959059603827, -0.4186065582098646, -0.9907075071687288, -0.23438988363331248, -4.060211684123061, -1.6383601149000864, -4.3647283159503045, -2.9595736765482394, -1.0961117207922761, -0.594338398136383, -2.9859099906993496, 3.4008331133407808, -0.529501094142212, -2.394352017212227, -2.8182299567741946, -1.278656148876319, -1.1038427294649544, -1.825678602370541, 1.0833327735982845, -0.31468371117396643, -1.1700241713254549, -1.775828883855377, -2.0318156223544737, -2.085889859663121, -2.005986234103677, -2.6200208386755452, -1.4270628045621727, -0.2723914136555301, 1.8893945922149555, -1.019386467059178, -1.2295004877894886, -1.6203182110974694, -0.3157509816212656, 0.16772258705254472, -4.056516836921082, -4.994445198371527, -0.026154946700456705, -1.8416612282321214, -0.5047209903109788, -0.048252706648401755, -3.0110057477087526, -1.8732241082893832, -2.5665146184379957, -2.4095327091936705, -2.6387583013283518, -1.9736007824917277, -5.089032137530714, -3.2833685141948203, -4.524321533577543, -3.17869069129451, -1.417420065132017, -1.618584855030612, -5.187647988655839, -2.9509711758492356, -3.1837540664500947]
                }
    testCase = "varying_fast_slow" #set to be string
    for i in range(0,len(JoshWalk[testCase])):
        magnitudePoint = sqrt(JoshWalk[testCase][i]*JoshWalk[testCase][i] + JoshWalk[testCase][i]*JoshWalk[testCase][i] + JoshWalk[testCase][i]*JoshWalk[testCase][i]) - Gravity
        print(magnitudePoint , " magnitude of the point is ")
        if magnitudePoint < 1:
            step +=1
    print("test case ", testCase, "steps gotten ",step," accuracy ", step/len(JoshWalk[testCase] * 100))

def dataCollection():
        i2c = busio.I2C(board.SCL, board.SDA) 
        mpu = adafruit_mpu6050.MPU6050(i2c) 
        xAcceleration = []
        yAcceleration = []
        zAcceleration = []
        magList = []
        timeList = []
        timeStart = t.time()
        for i in range(500):
            xData,yData,zData = mpu.acceleration
            xAcceleration.append(xData)
            yAcceleration.append(yData)
            zAcceleration.append(zData)
            magnitudePoint = abs(sqrt(xData*xData + yData*yData + zData*zData) - Gravity)
            magList.append(magnitudePoint)
            timeList.append(t.time() - timeStart)
        #xTemp,yTemp,zTemp, magTemp, timeTemp = graph(xAcceleration,yAcceleration,zAcceleration,magList,timeList)

        print((max(magList)), " The max magnitude detected is ")
        return (max(magList)) > 2
        # xAcceleration.append(mpu.acceleration[0])
        # yAcceleration.append(mpu.acceleration[1])
        # zAcceleration.append(mpu.acceleration[2])
        # magnitudePoint = sqrt(mpu.acceleration[0]*mpu.acceleration[0] +
        #  mpu.acceleration[1]*mpu.acceleration[1] + 
        #  mpu.acceleration[2]*mpu.acceleration[2]) - Gravity
        # magList.append(magnitudePoint)
            
def graph(x,y,z,mag,time):
    fig = plt.figure()
    ax1 = fig.add_subplot(1,1,1)
    ax1.clear()
    ax1.plot(time, x, label="x_acceleration")
    ax1.plot(time, y, label="y_acceleration")
    ax1.plot(time, z, label="z_acceleration")
    ax1.plot(time, mag, label = "magnitude")
    plt.legend()
    fig.canvas.draw()
    fig.canvas.flush_events()
    plt.show()
    return x,y,z,mag,time

def main():

    magnitudePoint = 0
    step = 0
    counter = 0


    # Write a loop to poll each sensor and print its axis values 
    while True : 
        # print("Acceleration: X:%.2f, Y: %.2f, Z: %.2f m/s^2" % 
        # (mpu.acceleration)) 
        # print("acceleration X:%.2f, Y: %.2f, Z: %.2f degrees/s" % (mpu.acceleration)) 

        if(dataCollection()):
            step +=1
        print("steps ", step)
        t.sleep(1) 
        counter +=1
    #print(magList)
        #graph(xAcceleration,yAcceleration,zAcceleration,magList,timeList)


if ( __name__ == "__main__"):
    counter = 0
    global step
    step = 0
    global magList
    magList = []
    global Gravity
    Gravity = 10.34

    try:
        # here you put your main loop or block of code
        while counter < 10000:
            # count up to 9000000 - takes ~20s
            #main()
            main()
            counter += 1
        print ("Target reached: %d" % counter)
        #print("tolerance ",step * 100 / len(magList))

    except KeyboardInterrupt:
        # here you put any code you want to run before the program
        # exits when you press CTRL+C
        print ("\n", counter) # print value of counter


   # except:
        # this catches ALL other exceptions including errors.
        # You won't get any error messages for debugging
        # so only use it once your code is working
       # print ("Other error or exception occurred!")
    finally:
        # i2c = busio.I2C(board.SCL, board.SDA)
        # dac = adafruit_mcp4725.MCP4725(i2c)
        # dac.raw_value = 0
        print()